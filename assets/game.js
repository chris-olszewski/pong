/* Generated by Opal 0.7.0.dev */
(function($opal) {
  $opal.dynamic_require_severity = "error";
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $klass = $opal.klass, $hash2 = $opal.hash2;

  $opal.add_stubs(['$attr_accessor', '$[]', '$[]=', '$config', '$<<', '$new', '$/', '$size', '$display', '$width', '$-', '$height', '$fill_color=', '$first', '$select', '$==', '$class', '$stroke_color=', '$stroke_width=', '$font_size=', '$fill_text', '$clear', '$each', '$update', '$draw', '$compact', '$draw_score']);
  return (function($base, $super) {
    function $Pong(){};
    var self = $Pong = $klass($base, $super, 'Pong', $Pong);

    var def = self._proto, $scope = self._scope;

    def.objects = def.score = nil;
    self.$attr_accessor("input", "objects", "score");

    $opal.cdecl($scope, 'BG_COLOR', $scope.get('C')['$[]']("#000000"));

    $opal.cdecl($scope, 'COLOR', $scope.get('C')['$[]']("#FFFFFF"));

    self.$config()['$[]']("display")['$[]=']("size", $scope.get('V')['$[]'](600, 800));

    def.$setup = function() {
      var self = this;

      self.objects = [];
      self.objects['$<<']($scope.get('Ball').$new($hash2(["position"], {"position": self.$display().$size()['$/'](2)})));
      self.objects['$<<']($scope.get('Paddle').$new($hash2(["position", "controls"], {"position": $scope.get('V')['$[]'](self.$display().$width()['$/'](2), self.$display().$height()['$-'](8)), "controls": "mouse"})));
      self.objects['$<<']($scope.get('Paddle').$new($hash2(["position"], {"position": $scope.get('V')['$[]'](self.$display().$width()['$/'](2), 8)})));
      self.input = $hash2([], {});
      self.score = 0;
      return self.$display()['$fill_color=']($scope.get('BG_COLOR'));
    };

    def.$ball = function() {
      var $a, $b, TMP_1, self = this;

      return ($a = ($b = self.objects).$select, $a._p = (TMP_1 = function(obj){var self = TMP_1._s || this;
if (obj == null) obj = nil;
      return obj.$class()['$==']($scope.get('Ball'))}, TMP_1._s = self, TMP_1), $a).call($b).$first();
    };

    def.$reset_score = function() {
      var self = this;

      return self.score = 0;
    };

    def.$draw_score = function() {
      var self = this;

      self.$display()['$fill_color=']($scope.get('COLOR'));
      self.$display()['$stroke_color=']($scope.get('COLOR'));
      self.$display()['$stroke_width='](5);
      self.$display()['$font_size='](60);
      return self.$display().$fill_text(self.score, self.$display().$size()['$/'](2));
    };

    return (def.$update = function(elapsed) {
      var $a, $b, TMP_2, self = this;

      self.$display()['$fill_color=']($scope.get('BG_COLOR'));
      self.$display().$clear();
      ($a = ($b = self.objects.$compact()).$each, $a._p = (TMP_2 = function(o){var self = TMP_2._s || this;
if (o == null) o = nil;
      o.$update(elapsed, self);
        return o.$draw(self.$display());}, TMP_2._s = self, TMP_2), $a).call($b);
      return self.$draw_score();
    }, nil) && 'update';
  })(self, $scope.get('Game'))
})(Opal);

//# sourceMappingURL=game.map
;
